<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="meeting">
	
	<!-- 모임 총 카운트 세는 쿼리 -->
	<select id="getMeetingCount" resultType="int">
		SELECT count(*) FROM meeting
	</select>
	
	<!-- 모임종류별 총 모임 갯수 얻는 쿼리 -->
	<select id="getMeetingCountByCategory" parameterType="int" resultType="int">
		select count(*) from meetingtype where category_no=#{value}
	</select>
	
	
	<resultMap id="meetingList" type="meetingDTO">
		<result property="boardNo" column="boardNo" />
		<collection property="date" column="boardNo" javaType="com.sixfam.withpet.model.dto.DateDTO" 
		ofType="dateDTO" select="getDateInfoByBoardNo"></collection>
	</resultMap>
	
	<!-- 모임 리스트 보여주기 위한 쿼리 -->
	<select id="getAllMeetingList" parameterType="pagingbean" resultMap="meetingList">
		SELECT memtca.rnum, memtca.board_no as boardNo, memtca.peopleCount, memtca.img_no, memtca.meetingState, memtca.meetingType, memtca.imgPath, b.title, b.hits, ga.gathering_start as gatheringStart, ga.gathering_end as gatheringEnd, ga.meeting_start as meetingStart, ga.meeting_end as meetingEnd
		FROM
			(select meca.rnum, meca.board_no, meca.people_count as peopleCount, meca.img_no, meca.meetingState, mtca.meetingType, i.img_path as imgPath, meca.date_no
			from 
				(select me.rnum, me.board_no, me.people_count, me.img_no, ca.category_name as meetingState, me.date_no
				from 
					(select row_number() over(order by board_no desc) as rnum, board_no, people_count, img_no, category_no, date_no
					from meeting) me, category ca 
				where me.category_no=ca.category_no) meca,
				
				(select mt.board_no, ca.category_name as meetingType
				from meetingtype mt, category ca 
				where mt.category_no=ca.category_no) mtca, img i
			where meca.board_no=mtca.board_no and meca.img_no=i.img_no) memtca, board b, gatheringdate ga
		WHERE memtca.board_no=b.board_no and memtca.date_no=ga.date_no and rnum between #{startRowNumber} and #{endRowNumber}
		ORDER BY boardNo desc
	</select>

	<select id="getCategoryNoByCategory" parameterType="string" resultType="int">
		select category_no from category where category_name=#{value}
	</select>
	
	<!-- 모임 참여 취소 -->
	<delete id="removeAttenderMember" parameterType="hashmap">
		delete from attender where boardNo=#{boardNo} and id=#{id}
	</delete>
	
	<!-- 현재 모임 참여 카운트 -->
	<select id="getPossibleCount" parameterType="int" resultType="int">
		select count(*) from attender where board_no=#{value}
	</select>
	
	<!-- 모임 개설 시작 -->
	<!-- board -> gatheringdate -> img -> meeting -> meetingtype 순서로 등록 -->
	<insert id="insertBoard" parameterType="meetingDTO">
		insert into board(board_no, title, content, hits, wdate, category_no, id)
		values(board_seq.nextval, #{title}, #{content}, 0, sysdate, 17, #{id})
	</insert>
	

	<insert id="insertGathertingdate" parameterType="dateDTO">
		insert into gatheringdate(date_no, gathering_start, gathering_end, meeting_start, meeting_end) 
		values(gatheringdate_seq.nextval, #{gatheringStart}, #{gatheringEnd}, #{meetingStart}, #{meetingEnd})
	</insert>

	<insert id="insertImg" parameterType="string">
		insert into img(img_no, img_path) values(img_seq.nextval, #{value})
	</insert>
	
	<!-- category_no ==> 25(모집중) 다음에 날짜별로 상태 바꾸기 -->
	<insert id="insertMeeting" parameterType="meetingDTO">
		insert into meeting(board_no,intro,people_count,place,date_no,img_no,category_no)
		values(board_seq.currval, #{intro}, #{peopleCount}, #{place}, gatheringdate_seq.currval,img_seq.currval, 25)
	</insert>
	
	<insert id="insertMeetingType" parameterType="int">
		insert into meetingType(board_no,category_no) values(board_seq.currval, #{value})
	</insert>
	<!-- 모임 개설 끝 -->



	<!-- <select id="getMeetingDetail" parameterType="int" resultType="meetingDTO">
		SELECT b.board_no as boardNo, b.id, b.title, b.content, b.hits, b.wdate, m.people_count as peoplecount, i.img_path as imgPath
		FROM meeting m, board b, img i
		WHERE m.board_no = b.board_no and m.img_no = i.img_no and b.board_no=#{value}
	</select> -->
	
	
	
	<!-- 모임 상세 정보 -->
	
	<resultMap id="meetingAll" type="meetingDTO">
		<result property="boardNo" column="boardNo" />
		<collection property="date" column="boardNo" javaType="com.sixfam.withpet.model.dto.DateDTO" 
		ofType="dateDTO" select="getDateInfoByBoardNo"></collection>
			<collection property="replyList" column="boardNo" javaType="java.util.ArrayList"
		ofType="replyDTO" select="selectReplyByBoardNo"></collection>
	</resultMap>
	
	<select id="getMeetingDetailByBoardNo" parameterType="int" resultMap="meetingAll">
		SELECT mbmti.id, mbmti.tel, mbmti.board_no as boardNo, mbmti.title, mbmti.content, mbmti.people_count as peopleCount, 
						c.category_name as meetingState, mbmti.place, i.img_path as imgPath, 
						ga.meeting_start as meetingStart, ga.meeting_end as meetingEnd
		FROM( 
					SELECT mem.id, mem.tel, b.board_no, b.title, b.content, mee.people_count, mee.place, mee.date_no, mee.img_no, mee.category_no
					FROM member mem, board b, meeting mee
					WHERE mem.id=b.id and b.board_no=mee.board_no
				) mbmti, img i, gatheringdate ga, category c
		WHERE mbmti.img_no=i.img_no and mbmti.date_no=ga.date_no and c.category_no=mbmti.category_no and mbmti.board_no=#{value} 
	</select>
	
	<select id="getMeetingSearchByCategoryType" parameterType="map" resultMap="meetingList">
						
		SELECT meee.*, b.title, a.attenderCount
		FROM 	(
							SELECT row_number() over(order by me.board_no desc) as rnum, i.img_path as imgPath, me.board_no as boardNo, 
											me.people_count as peopleCount, me.meetingState, me.date_no as dateNo, mee.meetingType
							FROM 	(	SELECT m.board_no, m.people_count, m.img_no, ca.category_name as meetingState, m.date_no
												FROM	meeting m, category ca 
												WHERE m.category_no=ca.category_no) me,
											(	SELECT mt.board_no,  ca.category_name as meetingType
												FROM	meetingtype mt, category ca 
												WHERE mt.category_no=ca.category_no and mt.category_no=#{categoryNo}) mee, img i
							WHERE me.board_no=mee.board_no and me.img_no=i.img_no
						) meee, (	SELECT count(*) as attenderCount, board_no FROM	attender group by board_no)	a, board b
		WHERE b.category_no=17 and b.board_no=meee.boardNo and a.board_no(+)=b.board_no 
						and meee.rnum between #{startRowNumber} and #{endRowNumber} ORDER BY meee.rnum asc
	</select>
	
	
	<!-- 모임 참여여부 확인 -->
	<select id="checkingAttender" parameterType="hashmap" resultType="memberDTO">
		SELECT id FROM ATTENDER WHERE board_no=#{boardNo} and id=#{id}
	</select>
	<!-- 모임 참여하기 -->
	<insert id="attenderMember" parameterType="hashmap">
		insert into ATTENDER(id,board_no)
		values(#{id},#{boardNo})
	</insert>
	
	<!-- 모임폐쇄 -->
	<resultMap type="meetingDTO" id="meetingDetail">
 		<collection property="date" column="boardNo" javaType="com.sixfam.withpet.model.dto.DateDTO"  
 		ofType="dateDTO" select="selectDateByBoardNo"></collection>
 	</resultMap>
 	
 	<select id="selectDetailByBoardNo" parameterType="int" resultMap="meetingDetail">
 		select img_no as imgNo, board_no as boardNo from meeting where board_no=#{value}
 	</select>
 	<select id="selectDateByBoardNo" parameterType="int" resultType="dateDTO">
 		select date_no as dateNo from meeting where board_no=#{value}
 	</select>
 	
 	<delete id="deleteAttenderByBoardNo" parameterType="int">
 		delete from attender where board_no=#{value}
 	</delete>
 	<delete id="deleteSympathyByBoardNo" parameterType="int">
 		delete from sympathy where board_no=#{value}
 	</delete>
 	<delete id="deleteBoardByBoardNo" parameterType="int">
 		delete from board where board_no=#{value}
 	</delete>
 	<delete id="deleteGatheringDateByBoardNo" parameterType="int">
 		delete from gatheringdate where date_no=#{value}
 	</delete>
 	<delete id="deleteImgByBoardNo" parameterType="int">
 		delete from img where img_no=#{value}
 	</delete>
 	
 	<!-- 댓글 -->
 	<insert id="insertReply" parameterType="replyDTO">
		insert into reply(reply_no, board_no, id, content, reg_date) 
		values(reply_seq.nextval,#{boardNo}, #{id}, #{content}, sysdate)
	</insert>
	

	<select id="selectReply" parameterType="int" resultType="replyDTO">
		SELECT r.reply_no as replyNo, r.content, to_char(r.reg_date, 'yyyy-mm-dd hh24:mi') as regDate, r.id, m.nick, i.img_path as imgPath
		FROM
			( select img_path, id from img i, dog d where i.img_no=d.img_no) i, reply r, member m
		WHERE r.board_no=#{value} and m.id=r.id and i.id(+)=r.id order by r.reply_no desc
	</select>
	<!-- 댓글 끝 -->
	
	<select id="getMemberInfoByBoradNo" parameterType="int" resultType="memberDTO">
		select m.id, m.nick, m.tel from member m, board b where m.id = b.id and board_no=#{value}
	</select>
	
	
	<!-- 모임 상세보기에 추가 -->
	<select id="getDateInfoByBoardNo" parameterType="int" resultType="dateDTO">
			SELECT to_char(g.meeting_start, 'yyyy.mm.dd') as meetingStart, to_char(g.meeting_end, 'yyyy.mm.dd') as meetingEnd,
							 to_char(g.gathering_start, 'yyyy.mm.dd') as gatheringStart, to_char(g.gathering_end, 'yyyy.mm.dd') as gatheringEnd
			FROM meeting m, gatheringdate g
			WHERE m.date_no=g.date_no and m.board_no=#{value}
	</select>
 	
 	<select id="selectReplyByBoardNo" parameterType="int" resultType="replyDTO">
 		select reply_no as replyNo, id, content
 		from reply
 		where board_no=#{value}
 	</select>
 	<select id="myMeetingAttender" parameterType="int" resultType="memberDTO">
 		SELECT m.nick,m.tel, m.id
		FROM MEMBER m,(SELECT b.board_no, b.title, b.content, b.hits, b.wdate, b.category_no, a.id 
		FROM (SELECT board_no,id FROM ATTENDER) a, (SELECT board_no, title, content, hits, wdate, category_no, id 
		FROM BOARD WHERE board_no=#{boardNo}) b WHERE a.board_no=b.board_no) ab
		WHERE m.id=ab.id
 	</select>
 	
 	<delete id="deleteReply" parameterType="int">
 		delete from reply where reply_no=#{value}
 	</delete>
 	
 	<select id="replyCount" parameterType="int" resultType="int">
 		select count(*) from reply where board_no=#{value}
 	</select>
 	
 	<!-- 모임상태 변경 -->
 	<update id="setMeetingState" parameterType="hashmap">
	 	<![CDATA[
	 		update meeting set category_no=#{categoryNo} where board_no in ( select m.board_no
			from ( select date_no from gatheringdate where gathering_end<#{today} ) d, meeting m where m.date_no=d.date_no )
	 	]]>
	 </update>
</mapper>
 
 
 

 
 
 
 
 
 
 
 
 
 
 
 